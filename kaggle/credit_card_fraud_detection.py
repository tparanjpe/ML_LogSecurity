# -*- coding: utf-8 -*-
"""credit-card-fraud-detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uxM4JbB0r4Bb3FQ_MpxiRVg0cbEx4zKB

# Import Libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib.ticker as mtick
import plotly.express as px
sns.set(rc = {'figure.figsize':(15,8)})

"""# Load Data"""

df=pd.read_csv('input/fraud-detection/fraudTrain.csv') 
df.isna().sum()

"""# Exploratory Data Analysis
#

**DataSet Information**
"""

#Transaction amount statistics
df.describe()

"""**Data  Visulization**"""

# #amount vs fraud
# ax=sns.histplot(x='amt',data=df[df.amt<=1000],hue='is_fraud',stat='percent',multiple='dodge',common_norm=False,bins=25)
# ax.set_ylabel('Percentage in Each Type')
# ax.set_xlabel('Transaction Amount in USD')
# plt.legend(title='Type', labels=['Fraud', 'Not Fraud'])

# #Relation between Gender and Fraud
# ax=sns.histplot(x='gender',data=df, hue='is_fraud',stat='percent',multiple='dodge',common_norm=False)
# ax.set_ylabel('Percentage')
# ax.set_xlabel('Credit Card Holder Gender')
# plt.legend(title='Type', labels=['Fraud', 'Not Fraud'])

#Relation between age vs fraud
import datetime as dt
df['age']=dt.date.today().year-pd.to_datetime(df['dob']).dt.year
ax=sns.kdeplot(x='age',data=df, hue='is_fraud', common_norm=False)
ax.set_xlabel('Credit Card Holder Age')
ax.set_ylabel('Density')
plt.xticks(np.arange(0,110,5))
plt.title('Age Distribution in Fraudulent vs Non-Fraudulent Transactions')
plt.legend(title='Type', labels=['Fraud', 'Not Fraud'])

"""**Data Perprocessing**"""

#remove duplicates
df.drop_duplicates(inplace=True)

#Feature Encoding
#one-hot encoding the category variable
category_onehot = pd.get_dummies(df.category, prefix='category', drop_first=True)
#one-hot encoding the gender variable
gender_onehot = pd.get_dummies(df.gender, prefix='gender', drop_first=True)
#one-hot encoding the age variable
age_onehot = pd.get_dummies(df.age, prefix='age', drop_first=True)

"""# Data Modeling and Prediction"""

df1 = pd.concat([df, category_onehot,gender_onehot,age_onehot], axis=1)

df1.head()

#subset the training data to include only the features that we need
train=df[['category','amt','gender','age','is_fraud']]

#convert category to dummy variables
train=pd.get_dummies(train, drop_first=True)
y_train=train['is_fraud'].values
X_train=train.drop("is_fraud", axis='columns').values

print(X_train)


# testing dataset
test=pd.read_csv('input/fraud-detection/fraudTest.csv')
test['age']=dt.date.today().year-pd.to_datetime(test['dob']).dt.year
test=test[['category','amt','gender','age','is_fraud']]

#convert category to dummy variables
test=pd.get_dummies(test, drop_first=True)
y_test=test['is_fraud'].values
X_test=test.drop("is_fraud", axis='columns').values

#logistic regression
from imblearn.over_sampling import SMOTE
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, classification_report

method= SMOTE()
X_resampled, y_resampled = method.fit_resample(X_train, y_train)
model=LogisticRegression()
model.fit(X_resampled,y_resampled)
predicted=model.predict(X_test)
print('Classification report:\n', classification_report(y_test, predicted))
conf_mat = confusion_matrix(y_true=y_test, y_pred=predicted)
print('Confusion matrix:\n', conf_mat)
print('Share of Non-Fraud in Test Data:', 1-round(y_test.sum()/len(y_test),4))

#random forest 
from sklearn.ensemble import RandomForestClassifier
model2 = RandomForestClassifier(random_state=5)
model2.fit(X_resampled,y_resampled)
predicted=model2.predict(X_test)
print('Classification report:\n', classification_report(y_test, predicted))
conf_mat = confusion_matrix(y_true=y_test, y_pred=predicted)
print('Confusion matrix:\n', conf_mat)
print('Share of Non-Fraud in Test Data:', 1-round(y_test.sum()/len(y_test),4))

"""### 5. Model Serialization"""

import pickle
pickle.dump(model2, open('finalModel', 'wb'))

